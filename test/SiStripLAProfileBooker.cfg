process analyze = 
{
  
untracked PSet maxEvents = {untracked int32 input = 1000} 
 
service = MessageLogger {

   #untracked vstring destinations = { "debug_test"  }
   untracked vstring destinations = { "debug_test_1000"  }
   
    untracked PSet debug = { untracked string threshold = "DEBUG"    } 
    untracked PSet cout = { untracked string threshold = "DEBUG"    } 
    untracked vstring debugModules =  { "read" , "sistripLorentzAngle"
              		              }
  }
  
 
  source = PoolSource
    {	  
          untracked vstring fileNames = 
     	       {
	          # Minbias
		   
                  
#"rfio:/castor/cern.ch/user/s/sfrosali/CSA07_analysis/MinBias/Minbias_CMSSW_1_6_0-PreCSA07-HLT-A5/235_reco/Minbias_preCSA07_TrackSelection_2.root"
"file:/data/sfrosali/tmp/Minbias_preCSA07_TrackSelection_2.root"		  
	       }
     	   
    }
    
  include "Geometry/CMSCommonData/data/cmsIdealGeometryXML.cfi"
  include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

  #Reconstruction
  include "Configuration/StandardSequences/data/Reconstruction.cff"
  
  #FakeConditions
  include "Configuration/StandardSequences/data/FakeConditions.cff"
  
  #Refitter
  include "RecoTracker/TrackProducer/data/RefitterWithMaterial.cff"
  replace TrackRefitter.TrajectoryInEvent = true
  replace TrackRefitter.src = "ALCARECOTkAlMinBias"
  #replace TrackRefitter.src = "ctfWithMaterialTracks"
       
  service = DaqMonitorROOTBackEnd{}
  
  #SiStripLAProfileBooker
  include "CalibTracker/SiStripLorentzAngle/data/SiStripLAProfileBooker.cfi"  
  replace sistripLorentzAngle.Tracks= "TrackRefitter"
  #replace sistripLorentzAngle.fileName="test.root"
  #replace sistripLorentzAngle.treeName="SiStripLATrees.root"
  #replace sistripLorentzAngle.fitName="fit_test"
  replace sistripLorentzAngle.fileName="test_1000.root"
  replace sistripLorentzAngle.treeName="SiStripLATrees_1000.root"
  replace sistripLorentzAngle.fitName="fit_test_1000"
  
  path recotracks = {TrackRefitter}
  path LorentzAngle = {sistripLorentzAngle}
 	
  schedule = {recotracks, LorentzAngle}
  
  module print = AsciiOutputModule {}
  endpath ep = { print }
   
}
